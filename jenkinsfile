pipeline{
    agent any
    
    tools {
        maven "my_maven_3.8.5"
        
    }
    environment{
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL="10.104.115.62:8081"
        NEXUS_CREDENTIAL_ID='nexus-cred'
        NEXUS_USER = credentials('nexus-cred')
        NEXUS_PASS = credentials('nexus-cred')
        
    }
    stages{
        stage("SCM Checkout and cleanup"){
            steps{
                git branch: 'main', credentialsId: 'git_ssh', url: 'git@github.com:Free6838/java_project.git'
                sh("mvn clean")
                echo "$NEXUS_USER_USR"
            }
        }
        stage("compile"){
            steps{
                sh("mvn compile")
            }
        }
        stage("test"){
            steps{
                sh("mvn test surefire-report:report")
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'target/site',
                    reportFiles: 'surefire-report.html',
                    reportName: 'Surefire Report'
                  ]                
            }
        }
        stage("package"){
            steps{
                sh("mvn package")
            }
        }
        stage("publish to nexus") {
            parallel{
                stage("publish SNAPSHOT"){
                    steps{
                        script {
                            pom = readMavenPom file: "pom.xml"; // Read POM xml file using 'readMavenPom' step
                            NEXUS_REPOSITORY_SNAPSHOTS = "${pom.artifactId}-snapshot"
                            filesByGlob = findFiles(glob: "target/*.${pom.packaging}"); // Print path - artifact found
                            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                            artifactPath = filesByGlob[0].path; // Extract the path from the File found
                            artifactExists = fileExists artifactPath; // boolean If the artifact name exists
                            
                            if(artifactExists) {
                                echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                                nexusArtifactUploader(
                                    nexusVersion: NEXUS_VERSION,
                                    protocol: NEXUS_PROTOCOL,
                                    nexusUrl: NEXUS_URL,
                                    groupId: pom.groupId,
                                    version: "${pom.version}-SNAPSHOT",
                                    repository: NEXUS_REPOSITORY_SNAPSHOTS,
                                    credentialsId: NEXUS_CREDENTIAL_ID,
                                    artifacts: [
                                        [artifactId: "${pom.artifactId}",
                                        classifier: '',
                                        file: artifactPath,
                                        type: pom.packaging],
                                        //upload the pom.xml file for additional information for Transitive dependencies
                                        [artifactId: "${pom.artifactId}",
                                        classifier: '',
                                        file: "pom.xml",
                                        type: "pom"]
                                    ]
                                );

                            } else {
                                error "*** File: ${artifactPath}, could not be found";
                            }
                        }
                    }
                }
                stage("publish RELEASE"){
                    steps{
                        script {
                            pom = readMavenPom file: "pom.xml"; // Read POM xml file using 'readMavenPom' step
                            NEXUS_REPOSITORY_RELEASES = "${pom.artifactId}-release"
                            filesByGlob = findFiles(glob: "target/*.${pom.packaging}"); // Print path - artifact found
                            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                            artifactPath = filesByGlob[0].path; // Extract the path from the File found
                            artifactExists = fileExists artifactPath; // boolean If the artifact name exists   
                            if(artifactExists) {
                                echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                                nexusArtifactUploader(
                                    nexusVersion: NEXUS_VERSION,
                                    protocol: NEXUS_PROTOCOL,
                                    nexusUrl: NEXUS_URL,
                                    groupId: pom.groupId,
                                    version: pom.version,
                                    repository: NEXUS_REPOSITORY_RELEASES,
                                    credentialsId: NEXUS_CREDENTIAL_ID,
                                    artifacts: [
                                        [artifactId: pom.artifactId,
                                        classifier: '',
                                        file: artifactPath,
                                        type: pom.packaging],
                                        //upload the pom.xml file for additional information for Transitive dependencies
                                        [artifactId: pom.artifactId,
                                        classifier: '',
                                        file: "pom.xml",
                                        type: "pom"]
                                    ]
                                );

                            } else {
                                error "*** File: ${artifactPath}, could not be found";
                            }
                        }
                    } 
                }
            }
        }
        stage("Ansible Download Artifact"){
            steps{
                script{
                    def ArtifactPath = "${WORKSPACE}/"
                    pom = readMavenPom file: "pom.xml";
                    echo("downloading artifact from ${NEXUS_REPOSITORY_RELEASES}")
                    sh """ansible-playbook playbook.yml --extra-vars=\"groupid=${pom.groupId} artifact=${pom.artifactId} version=${pom.version} mavenreleases=$NEXUS_REPOSITORY_RELEASES username=$NEXUS_USER_USR password=$NEXUS_USER_PSW workdir=$ArtifactPath"
                    """
                    echo("${WORKSPACE}")
                    
                        
                }

            }
        }
        stage("Build & Deploy Docker Image"){
            steps{
                dir("${WORKSPACE}"){ // put the path of Dockerfile
                script{
                    pom = readMavenPom file: "pom.xml";
                    build_version = pom.version
                    build_name = pom.artifactId
                    my_images = docker.build("$build_name:$build_version")
                    sh("docker run -p 8080:8080 -d $build_name:$build_version")
                }
            }
            }

        }
        
        

    }
    
}

